---
- name: "Download the exporter to localhost to then unarchive on targets"
  ansible.builtin.get_url:
    src: "{{ exporter_url }}"
    dest: "/tmp/{{ exporter_name }}.tar.gz"
  delegate_to: localhost

- name: "Download and extract exporter"
  ansible.builtin.unarchive:
    src: "/tmp/{{ exporter_name }}.tar.gz"
    dest: "{{ exporters_dest }}"

- name: "Run extra roles for this exporter"
  include_role:
    name: "{{ item }}"
  loop: "{{ exporter_extra_roles|default([]) }}"

- name: "Create exporter systemd service file"
  ansible.builtin.copy:
    dest: "/etc/systemd/system/{{ exporter_name }}.service"
    content: |
      [Unit]
      Description=Exporter {{ exporter_name }}
      After=network-online.target

      [Service]
      User=root
      Restart=on-failure
      Type=simple
      {% for key, val in (exporter_commandline_environment|default({})).items() %}
      Environment="{{ key }}={{ val }}"
      {% endfor %}
      ExecStart={{ exporter_commandline }}

      [Install]
      WantedBy=multi-user.target

- name: "Reload systemd daemon and start the exporter"
  ansible.builtin.systemd:
    daemon_reload: yes
    name: "{{ exporter_name }}"
    enabled: yes
    state: started

- name: "Populate service facts"
  service_facts:

- name: "Open the port in the firewall"
  ansible.posix.firewalld:
    offline: no
    permanent: yes
    immediate: yes
    port: "{{ exporter_port }}/tcp"
    state: enabled
    zone: public
  when: "ansible_facts.services['firewalld.service'] is defined and (ansible_facts.services['firewalld.service'].state == 'active' or ansible_facts.services['firewalld.service'].state == 'running')"

- name: "Scrape the exporter"
  include_role:
    name: add_prometheus_target
...
